name: CI Pipeline

on:
  push:
    branches:
      - master 
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22'

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: testdb
        run: go test ./...

      - name: Build the application
        run: go build -v ./...

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to server
        run: |
          echo "Deploying application..."
          # Add your deployment commands here (e.g., SSH to server and deploy)

#!!!!
      # - name: Install protoc
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y protobuf-compiler

      # - name: Install gRPC and gRPC Gateway plugins
      #   run: |
      #     go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
      #     go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
      #     go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.6.0
      #     go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.6.0
      #   env:
      #     GOBIN: /usr/local/go/bin
      #     PATH: ${{ runner.tool_cache }}/go/1.17.6/x64/bin:${{ github.workspace }}/bin:/usr/local/go/bin:${{ steps.setup-go.outputs.go-path }}

      # - name: Compile proto files
      #   run: |
      #     mkdir -p gen
      #     protoc -I ./protos \
      #       --go_out=gen --go_opt=paths=source_relative \
      #       --go-grpc_out=gen --go-grpc_opt=paths=source_relative \
      #       --grpc-gateway_out=gen --grpc-gateway_opt=paths=source_relative \
      #       ./protos/*.proto

      #!! Docker 
      # - name: Set up Docker Compose
      #   run: sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      #   run: sudo chmod +x /usr/local/bin/docker-compose

      # - name: Build and start services
      #   run: docker-compose -f docker-compose.yml up -d --build

      # - name: Wait for services to be healthy
      #   run: |
      #     for i in {1..30}; do
      #       if docker-compose -f docker-compose.yml ps | grep "healthy"; then
      #         echo "Services are healthy"
      #         exit 0
      #       fi
      #       echo "Waiting for services to be healthy..."
      #       sleep 10
      #     done
      #     echo "Services did not become healthy in time" && exit 1
